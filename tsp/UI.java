/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tsp;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JTextField;

/**
 *
 * @author Anand Kulkarni
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form ui
     *
     * @return
     */
    public JTextField getjTextField1() {
        return jTextField1;
    }

    public void setjTextField1(JTextField jTextField1) {
        this.jTextField1 = jTextField1;
    }

    public JTextField getjTextField2() {
        return jTextField2;
    }

    public void setjTextField2(JTextField jTextField2) {
        this.jTextField2 = jTextField2;
    }

    public JTextField getjTextField3() {
        return jTextField3;
    }

    public JButton getjButton1() {
        return jButton1;
    }

    public void setjTextField3(JTextField jTextField3) {
        this.jTextField3 = jTextField3;
    }

    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        populationSize = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        generations = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        mutationRate = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.red);

        populationSize.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        populationSize.setText("Population Size");

        jTextField1.setText("50");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        generations.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        generations.setText("Generations");
        generations.setMaximumSize(new java.awt.Dimension(72, 14));
        generations.setMinimumSize(new java.awt.Dimension(72, 14));
        generations.setPreferredSize(new java.awt.Dimension(72, 14));

        jTextField2.setText("200");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        mutationRate.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        mutationRate.setText("Mutation Rate (%)");
        mutationRate.setMaximumSize(new java.awt.Dimension(72, 14));
        mutationRate.setMinimumSize(new java.awt.Dimension(72, 14));
        mutationRate.setPreferredSize(new java.awt.Dimension(72, 14));

        jTextField3.setText("1.5");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(populationSize, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generations, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mutationRate, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(194, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(181, 181, 181))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(populationSize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generations, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mutationRate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        mutationRate.getAccessibleContext().setAccessibleName("mutationRate");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jButton1) {
            int popSize = Integer.parseInt(jTextField1.getText());
            int numberOfGenerations = Integer.parseInt(jTextField2.getText());
            double rateOfMutation = Double.parseDouble(jTextField3.getText());

            //Generate CSV for data set
            // Create and add our cities
            try {
                BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\Madhuri\\Desktop\\SCOA\\SCOAProject\\src\\tsp\\dataset.csv"));
                String x;
                while ((x = br.readLine()) != null) {
                    String[] s = x.split(",");
                    TourManager.addCity(new City(Integer.parseInt(s[0]), Integer.parseInt(s[1])));
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {

                int initialDistance = 0;
                for (int cityIndex = 0; cityIndex < TourManager.numberOfCities(); cityIndex++) {
                    // Get city we're travelling from
                    City fromCity = TourManager.getCity(cityIndex);

                    // City we're travelling to
                    City destinationCity;

                    // Check we're not on our tour's last city, if we are set our
                    // tour's final destination city to our starting city
                    if (cityIndex + 1 < TourManager.numberOfCities()) {
                        destinationCity = TourManager.getCity(cityIndex + 1);
                    } else {
                        destinationCity = TourManager.getCity(0);
                    }
                    // Get the distance between the two cities
                    initialDistance += fromCity.distanceTo(destinationCity);
                }

                // Initialize population
                Population pop = new Population(popSize, true);
                
                // Evolve population for N generations
                for (int i = 0; i < numberOfGenerations; i++) {
                    pop = GA.evolvePopulation(pop, rateOfMutation);
                }

                int finalDistance = pop.getFittest().getDistance();

                System.out.println("-------------------------------------------------------");
                System.out.println("**************GENETIC ALGORITHM PROPERTIES*************");
                System.out.println("-------------------------------------------------------");
                System.out.println("Number of cities : \t\t" + TourManager.numberOfCities());
                System.out.println("Populaion size : \t\t" + pop.populationSize());
                System.out.println("Number of Generations : \t" + numberOfGenerations);
                System.out.println("Elitism : \t\t\t" + GA.ELITISM);
                System.out.println("Selection Type : \t\tTOURNAMENT SELECTION");
                System.out.println("Selection K-value : \t\t" + GA.K_WAY_TOURNAMENT_SIZE);
                System.out.println("Crossover Type : \t\tTWO POINT CROSSOVER");
                System.out.println("Mutation Type : \t\tSWAP MUTATION");
                System.out.println("Mutation Rate : \t\t" + rateOfMutation + "%");
                System.out.println("-------------------------------------------------------");

                // Print final results
                System.out.println("\n\n-------------------------------------------------------");
                System.out.println("***************GENETIC ALGORITHM RESULTS***************");
                System.out.println("-------------------------------------------------------");
                System.out.println("Initial distance: \t\t\t" + initialDistance);
                System.out.println("Best Distance after Last Generation : \t" + finalDistance);
                System.out.println("-------------------------------------------------------\n\n");

                System.out.println("-------------------------------------------------------");
                System.out.println("Best Solution:");
                System.out.println(pop.getFittest());
                System.out.println("-------------------------------------------------------");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel generations;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel mutationRate;
    private javax.swing.JLabel populationSize;
    // End of variables declaration//GEN-END:variables

}
